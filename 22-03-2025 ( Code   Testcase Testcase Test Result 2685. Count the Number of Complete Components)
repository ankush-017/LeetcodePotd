class Solution {
public:
    void bfs(int node, vector<vector<int>>& adj, vector<bool>& visited, vector<int>& component) {
        queue<int> q;
        q.push(node);
        visited[node] = true;
        
        while (!q.empty()) {
            int curr = q.front();
            q.pop();
            component.push_back(curr);

            for (int neighbor : adj[curr]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {

        vector<vector<int>> adj(n);
        vector<bool> visited(n, false);
        // Build adjacency list
        for (auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        int completeComponents = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                vector<int> component;
                bfs(i, adj, visited, component);
                // Check if this component is complete
                bool isComplete = true;
                int size = component.size();
                for (int node : component) {
                    if (adj[node].size() != size - 1) {
                        isComplete = false;
                        break;
                    }
                }
                if (isComplete) completeComponents++;
            }
        }

        return completeComponents;
    }
};
